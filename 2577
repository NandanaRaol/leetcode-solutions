class Solution 
{
public:
int dr[4]={1,-1,0,0};
int dc[4]={0,0,1,-1};
struct abc
{
    int time;
    int x_cor;
    int y_cor;
      bool operator>(const abc&other)const
       {
            return time>other.time;
       }
};
    int minimumTime(vector<vector<int>>&v) 
    {
        int r=v.size();
        int c=v[0].size();
         if (v[0][1]>1 && v[1][0]>1)
            return -1;
      priority_queue<abc,vector<abc>,greater<abc>>pq;
      vector<vector<int>>res(r,vector<int>(c,INT_MAX));
      res[0][0]=0;
      pq.push({0,0,0});
      vector<vector<int>>vis(r,vector<int>(c,false));
      while(!pq.empty())
      {
        auto p=pq.top();
          int t=p.time;
          int x=p.x_cor;
          int y=p.y_cor;
          pq.pop();
     
          vis[x][y] = true;
          if(x==r-1 && y==c-1)
            return t;
          for(int i=0;i<4;i++)
          {
            int n_x=x+dr[i];
            int n_y=y+dc[i];
            if(n_x>=0 && n_y>=0 && n_x<=r-1 && n_y<=c-1 &&!vis[n_x][n_y])
            {
                 int next_time =t+1;
                    if (next_time < v[n_x][n_y])
                    {
                        next_time=v[n_x][n_y]+((v[n_x][n_y]-next_time)%2);
                    }
                    if (next_time<res[n_x][n_y]) 
                    {
                        res[n_x][n_y]=next_time;
                        pq.push({next_time,n_x,n_y});
                    }
             }
          }    
      }
      return res[r-1][c-1];
    }
};
